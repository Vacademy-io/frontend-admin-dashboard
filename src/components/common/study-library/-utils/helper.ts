import { Step1Data, Step2Data } from '../add-course/add-course-form';

export type CourseFormData = Step1Data & Step2Data;

interface FormattedCourseData {
    id: string;
    new_course: boolean;
    course_name: string;
    course_description: string;
    contain_levels: boolean;
    sessions: Array<{
        id: string;
        session_name: string;
        status: string;
        start_date: string;
        new_session: boolean;
        levels: Array<{
            id: string;
            new_level: boolean;
            level_name: string;
            duration_in_days: number;
            thumbnail_file_id: string;
            package_id: string;
            group: {
                id: string;
                group_name: string;
                group_value: string;
                new_group: boolean;
            };
        }>;
    }>;
    is_course_published_to_catalaouge: boolean;
    course_preview_image_media_id: string;
    course_banner_media_id: string;
    course_media_id: string;
    why_learn_html: string;
    who_should_learn_html: string;
    about_the_course_html: string;
    tags: string[];
}

type FormattedSession = FormattedCourseData['sessions'][0];
type FormattedLevel = FormattedSession['levels'][0];

export const convertToApiCourseFormat = (formData: CourseFormData): FormattedCourseData => {
    const hasLevels = formData.hasLevels === 'yes';
    const hasSessions = formData.hasSessions === 'yes';

    // Function to format levels
    const formatLevels = (levels: Array<{ id: string; name: string }>): FormattedLevel[] =>
        levels.map((level) => ({
            id: level.id,
            new_level: true,
            level_name: level.name,
            duration_in_days: 0,
            thumbnail_file_id: '',
            package_id: '',
            group: {
                id: '',
                group_name: '',
                group_value: '',
                new_group: true,
            },
        }));

    // Determine sessions structure
    let sessions: FormattedSession[] = [];
    if (!hasLevels && !hasSessions) {
        sessions = [{
            id: 'DEFAULT',
            session_name: '',
            status: 'ACTIVE',
            start_date: '',
            new_session: true,
            levels: [{
                id: 'DEFAULT',
                new_level: true,
                level_name: '',
                duration_in_days: 0,
                thumbnail_file_id: '',
                package_id: '',
                group: {
                    id: 'DEFAULT',
                    group_name: '',
                    group_value: '',
                    new_group: true,
                },
            }],
        }];
    } else if (hasSessions) {
        sessions = formData.sessions.map((session) => ({
            id: session.id,
            session_name: session.name,
            status: 'ACTIVE',
            start_date: session.startDate,
            new_session: true,
            levels: hasLevels ? formatLevels(session.levels) : [{
                id: 'DEFAULT',
                new_level: true,
                level_name: '',
                duration_in_days: 0,
                thumbnail_file_id: '',
                package_id: '',
                group: {
                    id: 'DEFAULT',
                    group_name: '',
                    group_value: '',
                    new_group: true,
                },
            }],
        }));
    } else if (hasLevels) {
        const standaloneLevels = formData.sessions.find((s) => s.id === 'standalone')?.levels || [];
        sessions = [{
            id: 'DEFAULT',
            session_name: '',
            status: 'ACTIVE',
            start_date: '',
            new_session: true,
            levels: formatLevels(standaloneLevels),
        }];
    }

    return {
        id: '', // This will be generated by backend for new courses
        new_course: true,
        course_name: formData.course || '',
        course_description: formData.description || '',
        contain_levels: hasLevels || hasSessions,
        sessions,
        is_course_published_to_catalaouge: formData.publishToCatalogue,
        course_preview_image_media_id: formData.coursePreview?.id || '',
        course_banner_media_id: formData.courseBanner?.id || '',
        course_media_id: formData.courseMedia?.id || '',
        why_learn_html: formData.learningOutcome || '',
        who_should_learn_html: formData.targetAudience || '',
        about_the_course_html: formData.aboutCourse || '',
        tags: formData.tags || [],
    };
};
