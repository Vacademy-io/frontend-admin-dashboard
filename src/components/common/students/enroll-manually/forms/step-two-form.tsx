/* eslint-disable */
import { FormStepHeading } from '../form-components/form-step-heading';
import { Form, FormControl, FormField, FormItem } from '@/components/ui/form';
import { FormItemWrapper } from '../form-components/form-item-wrapper';
import { useForm } from 'react-hook-form';
import { MyInput } from '@/components/design-system/input';
import { zodResolver } from '@hookform/resolvers/zod';
import { useFormStore } from '@/stores/students/enroll-students-manually/enroll-manually-form-store';
import { MyDropdown } from '../dropdownForPackageItems';
import {
    StepTwoData,
    stepTwoSchema,
} from '@/schemas/student/student-list/schema-enroll-students-manually';
import { useEffect, useRef, useMemo } from 'react';
import { StudentTable } from '@/types/student-table-types';
import {
    getCustomFieldSettingsFromCache,
    SystemField,
    CustomField,
} from '@/services/custom-field-settings';
import PhoneInputField from '@/components/design-system/phone-input-field';

interface SystemFieldConfig {
    key: keyof StepTwoData;
    label: string;
    type: 'text' | 'email' | 'tel' | 'date';
    required: boolean;
    order: number;
    visible: boolean;
}

export const StepTwoForm = ({
    initialValues,
    submitFn,
}: {
    initialValues?: StudentTable;
    submitFn: (fn: () => void) => void;
}) => {
    const { stepTwoData, setStepTwoData, nextStep } = useFormStore();
    const formRef = useRef<HTMLFormElement>(null);

    // Get system fields and custom fields from cache
    const customFieldSettings = getCustomFieldSettingsFromCache();

    // Map system field keys to form data keys (API uses UPPERCASE keys)
    // Note: Some fields like USERNAME, PACKAGE_SESSION_ID, INSTITUTE_ENROLLMENT_ID, etc.
    // are not applicable for enrollment form (they're for display in learner list)
    const systemFieldKeyMapping: Record<string, keyof StepTwoData> = {
        // Uppercase keys from API - Personal Information
        FULL_NAME: 'full_name',
        EMAIL: 'email',
        MOBILE_NUMBER: 'mobile_number',
        DATE_OF_BIRTH: 'date_of_birth',
        GENDER: 'gender',
        LINKED_INSTITUTE_NAME: 'linked_institute_name',

        // Address Information
        ADDRESS_LINE: 'address_line',
        CITY: 'city',
        REGION: 'region',
        PIN_CODE: 'pin_code',

        // Parent/Guardian Information
        FATHER_NAME: 'father_name',
        MOTHER_NAME: 'mother_name',
        PARENTS_EMAIL: 'parents_email',
        PARENTS_MOBILE_NUMBER: 'parents_mobile_number',
        PARENTS_TO_MOTHER_EMAIL: 'parents_to_mother_email',
        PARENTS_TO_MOTHER_MOBILE_NUMBER: 'parents_to_mother_mobile_number',

        // Note: These fields are excluded because they're not part of enrollment form:
        // - USERNAME: Generated by system
        // - PACKAGE_SESSION_ID: Selected in Step 3
        // - INSTITUTE_ENROLLMENT_ID: Generated or entered in Step 3
        // - ATTENDANCE: System calculated field
        // - COUNTRY: Not in current schema
        // - PLAN_TYPE: Selected in Step 4
        // - AMOUNT_PAID: Derived from payment
        // - PREFFERED_BATCH: Not in enrollment flow
        // - EXPIRY_DATE: Calculated from access_days in Step 3
        // - STATUS: System managed field
    };

    // Map system field types based on the field key
    const getInputType = (key: string): 'text' | 'email' | 'tel' | 'date' => {
        const upperKey = key.toUpperCase();
        if (upperKey.includes('EMAIL')) return 'email';
        if (upperKey.includes('MOBILE') || upperKey.includes('PHONE')) return 'tel';
        if (upperKey.includes('DATE')) return 'date';
        return 'text';
    };

    // Process system fields from cache
    const systemFieldsConfig: SystemFieldConfig[] = useMemo(() => {
        if (!customFieldSettings?.systemFields) {
            // Fallback: Show comprehensive default fields if cache is not available
            console.warn('‚ö†Ô∏è No system fields found in cache, using fallback default fields');
            return [
                // Mandatory fields
                {
                    key: 'full_name',
                    label: 'Full Name',
                    type: 'text',
                    required: true,
                    order: 1,
                    visible: true,
                },
                {
                    key: 'email',
                    label: 'Email',
                    type: 'email',
                    required: true,
                    order: 2,
                    visible: true,
                },
                {
                    key: 'mobile_number',
                    label: 'Mobile Number',
                    type: 'tel',
                    required: true,
                    order: 3,
                    visible: true,
                },
                // Optional personal fields
                {
                    key: 'gender',
                    label: 'Gender',
                    type: 'text',
                    required: false,
                    order: 4,
                    visible: true,
                },
                {
                    key: 'date_of_birth',
                    label: 'Date of Birth',
                    type: 'date',
                    required: false,
                    order: 5,
                    visible: true,
                },
                {
                    key: 'linked_institute_name',
                    label: 'College/School Name',
                    type: 'text',
                    required: false,
                    order: 6,
                    visible: true,
                },
                // Address fields
                {
                    key: 'address_line',
                    label: 'Address',
                    type: 'text',
                    required: false,
                    order: 7,
                    visible: true,
                },
                {
                    key: 'city',
                    label: 'City',
                    type: 'text',
                    required: false,
                    order: 8,
                    visible: true,
                },
                {
                    key: 'region',
                    label: 'State/Region',
                    type: 'text',
                    required: false,
                    order: 9,
                    visible: true,
                },
                {
                    key: 'pin_code',
                    label: 'PIN Code',
                    type: 'text',
                    required: false,
                    order: 10,
                    visible: true,
                },
                // Parent/Guardian fields
                {
                    key: 'father_name',
                    label: "Father's Name",
                    type: 'text',
                    required: false,
                    order: 11,
                    visible: true,
                },
                {
                    key: 'mother_name',
                    label: "Mother's Name",
                    type: 'text',
                    required: false,
                    order: 12,
                    visible: true,
                },
                {
                    key: 'parents_mobile_number',
                    label: "Father's Mobile Number",
                    type: 'tel',
                    required: false,
                    order: 13,
                    visible: true,
                },
                {
                    key: 'parents_email',
                    label: "Father's Email",
                    type: 'email',
                    required: false,
                    order: 14,
                    visible: true,
                },
                {
                    key: 'parents_to_mother_mobile_number',
                    label: "Mother's Mobile Number",
                    type: 'tel',
                    required: false,
                    order: 15,
                    visible: true,
                },
                {
                    key: 'parents_to_mother_email',
                    label: "Mother's Email",
                    type: 'email',
                    required: false,
                    order: 16,
                    visible: true,
                },
            ];
        }

        console.log(
            'üìã System fields from cache:',
            customFieldSettings.systemFields.length,
            'total fields'
        );

        // Fields that are excluded from enrollment form (they're system-managed or in other steps)
        const excludedFields = [
            'USERNAME',
            'PACKAGE_SESSION_ID',
            'INSTITUTE_ENROLLMENT_ID',
            'ATTENDANCE',
            'COUNTRY',
            'PLAN_TYPE',
            'AMOUNT_PAID',
            'PREFFERED_BATCH',
            'EXPIRY_DATE',
            'STATUS',
        ];

        return customFieldSettings.systemFields
            .map((field: SystemField): SystemFieldConfig | null => {
                // Skip fields that are not part of enrollment form
                if (excludedFields.includes(field.key)) {
                    console.log(`  ‚è≠Ô∏è Skipping ${field.key} (system-managed or in other step)`);
                    return null;
                }

                // Try to map the field key (API returns UPPERCASE keys)
                const formKey =
                    systemFieldKeyMapping[field.key] ||
                    systemFieldKeyMapping[field.key.toLowerCase()];
                if (!formKey) {
                    console.warn(`  ‚ö†Ô∏è System field key not mapped: ${field.key}`);
                    return null;
                }

                // Mandatory fields (name, email, phone) are always visible
                const isMandatory = ['full_name', 'email', 'mobile_number'].includes(formKey);
                const isVisible = isMandatory || field.visibility;

                if (isVisible) {
                    console.log(
                        `  ‚úÖ ${field.key} ‚Üí ${formKey} (${isMandatory ? 'MANDATORY' : 'visible'}, label: "${field.customValue || field.defaultValue}")`
                    );
                } else {
                    console.log(`  üëÅÔ∏è Hiding ${field.key} (visibility: false)`);
                    return null;
                }

                return {
                    key: formKey,
                    label: field.customValue || field.defaultValue,
                    type: getInputType(field.key),
                    required: isMandatory,
                    order: field.order,
                    visible: isVisible,
                };
            })
            .filter((field): field is SystemFieldConfig => field !== null)
            .sort((a, b) => a.order - b.order);
    }, [customFieldSettings]);

    // Get custom fields visible in learner enrollment
    const customFieldsConfig: CustomField[] = useMemo(() => {
        if (!customFieldSettings?.customFields) return [];

        return customFieldSettings.customFields.filter(
            (field: CustomField) => field.visibility?.learnerEnrollment === true
        );
    }, [customFieldSettings]);

    // Prepare default form values
    const prepareDefaultValues = (): StepTwoData => {
        if (stepTwoData && Object.keys(stepTwoData).length > 0) {
            return stepTwoData;
        }

        // Pre-fill from initialValues if available (re-enrollment scenario)
        if (initialValues) {
            return {
                full_name: initialValues.full_name || '',
                email: initialValues.email || '',
                mobile_number: initialValues.mobile_number || '',
                gender: initialValues.gender || '',
                date_of_birth: initialValues.date_of_birth || '',
                linked_institute_name: initialValues.linked_institute_name || '',
                address_line: initialValues.address_line || '',
                city: initialValues.city || '',
                region: initialValues.region || '',
                pin_code: initialValues.pin_code || '',
                father_name: initialValues.father_name || '',
                mother_name: initialValues.mother_name || '',
                parents_email: initialValues.parents_email || '',
                parents_mobile_number: initialValues.parents_mobile_number || '',
                parents_to_mother_email: initialValues.parents_to_mother_email || '',
                parents_to_mother_mobile_number:
                    initialValues.parents_to_mother_mobile_number || '',
                custom_fields: {},
            };
        }

        // Default empty values
        return {
            full_name: '',
            email: '',
            mobile_number: '',
            custom_fields: {},
        };
    };

    const form = useForm<StepTwoData>({
        resolver: zodResolver(stepTwoSchema),
        defaultValues: prepareDefaultValues(),
        mode: 'onChange',
    });

    const onSubmit = (values: StepTwoData) => {
        setStepTwoData(values);
        nextStep();
    };

    const requestFormSubmit = () => {
        if (formRef.current) {
            formRef.current.requestSubmit();
        }
    };

    useEffect(() => {
        if (submitFn) {
            submitFn(requestFormSubmit);
        }
    }, [submitFn]);

    return (
        <div>
            <div className="flex flex-col justify-center px-6 text-neutral-600">
                <Form {...form}>
                    <form
                        ref={formRef}
                        onSubmit={form.handleSubmit(onSubmit)}
                        className="flex flex-col gap-6"
                    >
                        <FormItemWrapper<StepTwoData> control={form.control} name="full_name">
                            <FormStepHeading stepNumber={2} heading="Personal Details" />
                        </FormItemWrapper>

                        <div className="flex flex-col gap-8">
                            {/* System Fields */}
                            {systemFieldsConfig.map((fieldConfig) => {
                                const fieldKey = fieldConfig.key;

                                // Special handling for phone number field
                                if (fieldConfig.type === 'tel' && fieldKey === 'mobile_number') {
                                    return (
                                        <FormField
                                            key={fieldKey}
                                            control={form.control}
                                            name={fieldKey}
                                            render={() => (
                                                <FormItem>
                                                    <FormControl>
                                                        <PhoneInputField
                                                            label={fieldConfig.label}
                                                            placeholder="123 456 7890"
                                                            name={fieldKey}
                                                            control={form.control}
                                                            country="in"
                                                            required={fieldConfig.required}
                                                        />
                                                    </FormControl>
                                                </FormItem>
                                            )}
                                        />
                                    );
                                }

                                // Special handling for other phone fields
                                if (
                                    fieldConfig.type === 'tel' &&
                                    (fieldKey === 'parents_mobile_number' ||
                                        fieldKey === 'parents_to_mother_mobile_number')
                                ) {
                                    return (
                                        <FormField
                                            key={fieldKey}
                                            control={form.control}
                                            name={fieldKey}
                                            render={() => (
                                                <FormItem>
                                                    <FormControl>
                                                        <PhoneInputField
                                                            label={fieldConfig.label}
                                                            placeholder="123 456 7890"
                                                            name={fieldKey}
                                                            control={form.control}
                                                            country="in"
                                                            required={fieldConfig.required}
                                                        />
                                                    </FormControl>
                                                </FormItem>
                                            )}
                                        />
                                    );
                                }

                                // Special handling for gender field - dropdown
                                if (fieldKey === 'gender') {
                                    const genderOptions = [
                                        { id: 'MALE', name: 'Male' },
                                        { id: 'FEMALE', name: 'Female' },
                                        { id: 'OTHER', name: 'Other' },
                                    ];

                                    return (
                                        <FormField
                                            key={fieldKey}
                                            control={form.control}
                                            name={fieldKey}
                                            render={({ field }) => {
                                                const selectedGender = field.value
                                                    ? genderOptions.find(
                                                          (option) => option.id === field.value
                                                      )
                                                    : undefined;

                                                return (
                                                    <FormItem>
                                                        <FormControl>
                                                            <div className="flex flex-col gap-1">
                                                                <label className="text-sm font-medium">
                                                                    {fieldConfig.label}
                                                                    {fieldConfig.required && (
                                                                        <span className="ml-1 text-danger-600">
                                                                            *
                                                                        </span>
                                                                    )}
                                                                </label>
                                                                <MyDropdown
                                                                    currentValue={selectedGender}
                                                                    dropdownList={genderOptions}
                                                                    handleChange={(value) => {
                                                                        if (
                                                                            typeof value ===
                                                                                'object' &&
                                                                            'id' in value
                                                                        ) {
                                                                            field.onChange(
                                                                                value.id
                                                                            );
                                                                        }
                                                                    }}
                                                                    placeholder="Select Gender"
                                                                    error={
                                                                        form.formState.errors.gender
                                                                            ?.message as string
                                                                    }
                                                                    required={fieldConfig.required}
                                                                    disable={false}
                                                                />
                                                            </div>
                                                        </FormControl>
                                                    </FormItem>
                                                );
                                            }}
                                        />
                                    );
                                }

                                // Standard input fields
                                return (
                                    <FormField
                                        key={fieldKey}
                                        control={form.control}
                                        name={fieldKey}
                                        render={({ field: { onChange, value, ...field } }) => (
                                            <FormItem>
                                                <FormControl>
                                                    <MyInput
                                                        inputType={fieldConfig.type}
                                                        label={fieldConfig.label}
                                                        inputPlaceholder={`Enter ${fieldConfig.label}`}
                                                        input={(value as string) || ''}
                                                        onChangeFunction={onChange}
                                                        error={
                                                            form.formState.errors[fieldKey]
                                                                ?.message as string
                                                        }
                                                        required={fieldConfig.required}
                                                        size="large"
                                                        className="w-full"
                                                        {...field}
                                                    />
                                                </FormControl>
                                            </FormItem>
                                        )}
                                    />
                                );
                            })}

                            {/* Custom Fields */}
                            {customFieldsConfig.length > 0 && (
                                <>
                                    <div className="mt-4 border-t pt-4">
                                        <h3 className="text-h6 mb-4 font-semibold">
                                            Additional Information
                                        </h3>
                                    </div>
                                    {customFieldsConfig.map((customField: CustomField) => {
                                        if (customField.type === 'dropdown') {
                                            // Convert options to dropdown format
                                            const dropdownOptions =
                                                customField.options?.map((option) => ({
                                                    id: option,
                                                    name: option,
                                                })) || [];

                                            return (
                                                <FormField
                                                    key={customField.id}
                                                    control={form.control}
                                                    name="custom_fields"
                                                    render={({ field }) => {
                                                        const currentValue =
                                                            field.value?.[customField.id];
                                                        const selectedOption = currentValue
                                                            ? {
                                                                  id: currentValue,
                                                                  name: currentValue,
                                                              }
                                                            : undefined;

                                                        return (
                                                            <FormItem>
                                                                <FormControl>
                                                                    <div className="flex flex-col gap-1">
                                                                        <label className="text-sm font-medium">
                                                                            {customField.name}
                                                                            {customField.required && (
                                                                                <span className="ml-1 text-danger-600">
                                                                                    *
                                                                                </span>
                                                                            )}
                                                                        </label>
                                                                        <MyDropdown
                                                                            currentValue={
                                                                                selectedOption
                                                                            }
                                                                            dropdownList={
                                                                                dropdownOptions
                                                                            }
                                                                            handleChange={(
                                                                                value
                                                                            ) => {
                                                                                if (
                                                                                    typeof value ===
                                                                                        'object' &&
                                                                                    'id' in value
                                                                                ) {
                                                                                    const newCustomFields =
                                                                                        {
                                                                                            ...(field.value ||
                                                                                                {}),
                                                                                            [customField.id]:
                                                                                                value.id,
                                                                                        };
                                                                                    field.onChange(
                                                                                        newCustomFields
                                                                                    );
                                                                                }
                                                                            }}
                                                                            placeholder={`Select ${customField.name}`}
                                                                            required={
                                                                                customField.required
                                                                            }
                                                                            disable={false}
                                                                        />
                                                                    </div>
                                                                </FormControl>
                                                            </FormItem>
                                                        );
                                                    }}
                                                />
                                            );
                                        }

                                        // Text/Number custom fields
                                        return (
                                            <FormField
                                                key={customField.id}
                                                control={form.control}
                                                name="custom_fields"
                                                render={({ field }) => (
                                                    <FormItem>
                                                        <FormControl>
                                                            <MyInput
                                                                inputType={
                                                                    customField.type === 'number'
                                                                        ? 'number'
                                                                        : 'text'
                                                                }
                                                                label={customField.name}
                                                                inputPlaceholder={`Enter ${customField.name}`}
                                                                input={
                                                                    field.value?.[customField.id] ||
                                                                    ''
                                                                }
                                                                onChangeFunction={(e) => {
                                                                    const newCustomFields = {
                                                                        ...(field.value || {}),
                                                                        [customField.id]:
                                                                            e.target.value,
                                                                    };
                                                                    field.onChange(newCustomFields);
                                                                }}
                                                                required={customField.required}
                                                                size="large"
                                                                className="w-full"
                                                            />
                                                        </FormControl>
                                                    </FormItem>
                                                )}
                                            />
                                        );
                                    })}
                                </>
                            )}
                        </div>
                    </form>
                </Form>
            </div>
        </div>
    );
};
